<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>OASTest</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />

    @Styles.Render("~/Content/bundle")
    @Styles.Render("~/Content/DevExtremeBundle")
    @Scripts.Render("~/Scripts/bundle")
    @Scripts.Render("~/Scripts/DevExtremeBundle")
    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Editors },
        new StyleSheet { ExtensionSuite = ExtensionSuite.Chart }
    )
    @Html.DevExpress().GetScripts(
        new Script { ExtensionSuite = ExtensionSuite.NavigationAndLayout },
        new Script { ExtensionSuite = ExtensionSuite.Editors },
        new Script { ExtensionSuite = ExtensionSuite.Chart }
    )
    <script type="text/javascript">
        OPC_config =
            {
                token: '2d1288cf-5ac3-4851-b2bd-9c17e263dea5',
                //TEST SERVER CONFIGURATION
                serverURL: 'http://ops-dev.savageservices.com:58725',
                debug: true,
                watch_tags: [
                    "Trenton.Tank201BBLs.Value",
                    "Trenton.Tank202BBLs.Value",
                    "Trenton.Tank203BBLs.Value",
                    "Trenton.Tank204BBLs.Value",
                    "Trenton.Tank205BBLs.Value",
                    "TrentonAL.DAPL Connection.Status.Value",
                    "TestPLC.LogicalMainSwitch.Value",
                    "TestPLC.MainSwitch.Value",
                    "TestPLC.TimerOnSetpoint.Value",
                    "TestPLC.TimerOffSetpoint.Value",
                    "TestPLC.TimerReset.Value",
                    "TestPLC.TimerStatus.Value",
                    "TestPLC.TimerValue.Value",
                    "TestPLC.LinePressure.Value",
                    "TestPLC.PumpStatus.Value",
                    "TestPLC.TimerOnCountdown.Value",
                    "TestPLC.TimerOffCountdown.Value"
                ],
                trend_bindings:[
                  {
                      chartid:"linePressureTrend", 
                      samplerate: 1,
                      timeframe: 100,
                      tags:[
                        {
                            label: "Line Pressure",
                            tag: "TestPLC.LinePressure.Value",
                            color: "#58D3F7",
                            yaxis: 1,
                            lines: { fill: true },
                            points: { show: true }

                        }
                      ],
                      retain: 50,
                      callback:trendCallback
                  }
                ],
                alarm_bindings: [
                  {
                      alarmid: "linePressureAlarm",
                      showHistory: false,
                      filter: {
                          alarmtypes: ["Digital", "High", "High High", "Low", "Low Low"]

                      },
                      columns: [
                        { name: "AlarmDateTime", text: "Alarm Date/Time", type: "datetime", visible: true, sort: 'desc', width: '200px', searchable: false },
                        { name: "Active", text: "Active", type: "boolean", visible: true, width: '50px', align: 'center' },
                        { name: "AlarmValue", text: "Alarm Value", type: "string", visible: true, align: 'right' },
                        { name: "Text", text: "Text", type: "string", visible: true },
                        { name: "AlarmType", text: "Alarm Type", type: "string", visible: true },
                        { name: "Acked", text: "Acked", type: "boolean", visible: true }
                      ]
                  }
                ],

                refresh_callback: update_data
                //THEHUB TEST
                //serverUrl: 'http://thehub.savageservices.com:58725',
                //debug: true,
                //watch_tags: [
                //    "AccuLoad.DAPLConnection.GSV.Value",
                //    "AccuLoad.DAPLConnection.GV.Value",
                //    "AccuLoad.DAPLConnection.Status.Value",
                //    "AccuLoad.DAPLConnection.TransactionNumber.Value",
                //    "AccuLoad.DAPLTransfer.GSV.Value",
                //    "AccuLoad.DAPLTransfer.GV.Value",
                //    "AccuLoad.DAPLTransfer.Status.Value",
                //    "AccuLoad.DAPLTransfer.TransactionNumber.Value",
                //    "Volume.Tank201BBLs.Value",
                //    "Volume.Tank202BBLs.Value",
                //    "Volume.Tank203BBLs.Value",
                //    "Volume.Tank204BBLs.Value",
                //    "Volume.Tank205BBLs.Value"
                //],
                //refresh_callback: update_data

            };

        $(document).ready(function () {
            //debugger;
            window.console.log("token: " + OPC.token);
            OPC.authenticate("OASWeb", "S4v4g3*18");
            if (OPC.token != OPC_config.token) {
                // the authentication token has been updated
                // you can now use the token for all subsequent pages within a session
                OPC_config.token = OPC.token;
            };

            //$("#btnPowerOn").click(function () {
            //    OPC.set_value("TestPLC.LogicalMainSwitch.Value", "toggle");
            //});
            //$("#btnTimerReset").click(function () {
            //    OPC.set_value("TestPLC.TimerReset.Value", "toggle");
            //})

        });


        //debugger;
        function update_data(data) {
            //var clickMainSwitch = OPC.get_value("TestPLC.MainSwitch.Value");
            //clickMainSwitch = (clickMainSwitch == "True") ? "On" : "Off";
            //var clickLogSwitch = OPC.get_value("TestPLC.LogicalMainSwitch.Value");
            //clickLogSwitch = (clickLogSwitch == "True") ? "On" : "Off";
            //var clickTimerSetpoint = OPC.get_value("TestPLC.TimerOnSetpoint.Value");
            //var clickTimerReset = OPC.get_value("TestPLC.TimerReset.Value");
            //var clickTimerStatus = OPC.get_value("TestPLC.TimerStatus.Value");
            //var clickTimerValue = OPC.get_value("TestPLC.TimerValue.Value");
            //var clickLinePressure = OPC.get_value("TestPLC.LinePressure.Value");

            //$("#mainButton").html(clickMainSwitch);
            //$("#logicalButton").html(clickLogSwitch);
            //$("#timerOnSetpoint").html(clickTimerSetpoint);
            //$("#timerReset").html(clickTimerReset);
            //$("#timerStatus").html(clickTimerStatus);
            //$("#timerValue").html(clickTimerValue);
            //$("#btnPowerOn").html("System: " + clickLogSwitch);
            //$("#btnTimerReset").html("Reset Timer");
            //var tankHigh = tags.HighRange;

            //var tankLevel = tags.Trenton.Tank201BBLs.Value.val;
            //var tankHighLevel = tags.Trenton.Tank201BBLs.props.Value.HighLevel;
        }

        // This configures the options object used by Flot for rendering the grid.
        // It includes information on how the timestamp is rendered in the x-axis.  
        // All of these settings are documented at http://www.flotcharts.org/

        grid_options = {
            series: {
                shadowSize: 5
            }, // drawing is faster without shadows
            lines: {
                show: true,
                fill: true
            },
            //splines: {
            //    show: true,
            //    fill: true,
            //    tension: 1,
            //    lineWidth: 1
            //},
            grid: {
                hoverable: true,
                clickable: true,
                autoHighlight: false,
                backgroundColor: { colors: ["#1c1c1c", "#000000"] }
            },
            crosshair: { mode: "x" },
            legend: {
                //backgroundOpacity: 0.1,
                //backgroundColor: "#000",
                //color: "#000"
                

            },
            xaxis: {
                mode: "time",
                font: {
                    size: 10,
                    lineHeight: 10,
                    family: "sans-serif",
                    color: "#ffffff"
                },
                tickSize: [2, "second"],
                tickFormatter: function (v, axis) {
                    var dt = new Date(v);
                    // display axis label every 30 seconds
                    if (dt.getSeconds() % 30 == 0) {
                        // format label to include date and time
                        return OPC.Util.formatDate(dt, "mm/dd/yyyy hh:MM:ss")
                    }
                    return "";
                }
            },
            yaxes: [
              { position: 'left', min: 0, max: 100 },
              { position: 'left', min: -1, max: 1 },
              { position: 'left', min: 0, max: 100 }
            ]
        };

        // This is the callback fired by the HTML HMI library, passing in the data points to be rendered
        function trendCallback(data) {
            // locate the trend_binding based on the inbound data
            var tb = OPC.Trend.getTrendBinding(data);
            // format the data as a Flot series
            var fd = OPC.Flot.buildTrendData(data);
            // call $.plot to draw the chart
            $.plot("#" + tb.chartid, fd, grid_options);
        }

    </script>
</head>

<body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">OASTest</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="#">Home</a></li>
                    <li><a href="#about">About</a></li>
                    <li><a href="#contact">Contact</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid">
        @RenderBody()
    </div>
</body>

</html>